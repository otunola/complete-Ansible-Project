- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import VPC Variables
      include_vars: vars/output_vars

    - name: Import Vprofile Variables
      include_vars: vars/vprostacksetup

    - name: create vprofile ec2 key
      ec2_key:
        name: vpro-key
        region: "{{ region }}"
      register: vprokey_out

    - name: save private key into bastion-key.pem
      copy:
        content: "{{vprokey_out.key.private_key}}"
        dest: "./loginkey_vpro.pem"
        mode: 0600
      when: vprokey_out.changed


    - name: create sec group for load balancer
      ec2_group:
        name: vproELB-sg
        description: allow port 80 from everywhere
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out


    - name: create sec group for vprofile stack
      ec2_group:
        name: vprostack-sg
        description: allow port 80 from everywhere
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}"

      register: vprostacksg_out


    - name: update sec group with its own sg id
      ec2_group:
        name: vprostack-sg
        description: allow port 80 from everywhere
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{ vprostacksg_out.group_id }}"


    - name: creating Nginx web01
      ec2:
        key_name: vpro-key
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ nginx_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          name: "web01"
          project: vprofile
          owner: devops team
        exact_count: 1
        count_tag:
          name: "web01"
          project: vprofile
          owner: devops team
        group_id: "{{ vprostacksg_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: web01_out



    - name: creating tomcat app01
      ec2:
        key_name: vpro-key
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ tomcat_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          name: "app01"
          project: vprofile
          owner: devops team
        exact_count: 1
        count_tag:
          name: "app01"
          project: vprofile
          owner: devops team
        group_id: "{{ vprostacksg_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: app01_out


    - name: creating memcache mc01
      ec2:
        key_name: vpro-key
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ memcache_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          name: "mc01"
          project: vprofile
          owner: devops team
        exact_count: 1
        count_tag:
          name: "mc01"
          project: vprofile
          owner: devops team
        group_id: "{{ vprostacksg_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: mc01_out



    - name: creating Rabbit rmq01
      ec2:
        key_name: vpro-key
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ rmq_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          name: "rmq01"
          project: vprofile
          owner: devops team
        exact_count: 1
        count_tag:
          name: "rmq01"
          project: vprofile
          owner: devops team
        group_id: "{{ vprostacksg_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: rmq01_out


    - name: creating mysql db01
      ec2:
        key_name: vpro-key
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ mysql_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          name: "db01"
          project: vprofile
          owner: devops team
        exact_count: 1
        count_tag:
          name: "db01"
          project: vprofile
          owner: devops team
        group_id: "{{ vprostacksg_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: db01_out

    - debug:
        var: db01_out.tagged_instances[0].id
    - local_action:
        module: ec2_elb_lb
        name: "vprofile-elb"
        region: "{{ region }}"
        state: present
        instance_ids:
          - "{{ db01_out.tagged_instances[0].id }}"
        purge_instance_ids: true
        security_group_ids: "{{ vproELBSG_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80

    - name: update host ip & name in file provision-stack/group_vars/hostsip
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          web01_ip: "{{ web01_out.tagged_instances[0].private_ip }}"
          app01_ip: "{{ app01_out.tagged_instances[0].private_ip }}"
          rmq01_ip: "{{ rmq01_out.tagged_instances[0].private_ip }}"
          mc01_ip: "{{ mc01_out.tagged_instances[0].private_ip }}"
          db01_ip: "{{  db01_out.tagged_instances[0].private_ip }}"

    - name: copy login key to provision stack directory
      copy:
        src: loginkey_vpro.pem
        dest: provision-stack/loginkey_vpro.pem
        mode: 0400

    - name: update inventory file provision stack
      blockinfile:
        path: provision-stack/inventory-vpro
        block: |
          web01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
          app01 ansible_host={{ app01_out.tagged_instances[0].private_ip }}
          rmq01 ansible_host={{ rmq01_out.tagged_instances[0].private_ip }}
          mc01 ansible_host={{ mc01_out.tagged_instances[0].private_ip }}
          db01 ansible_host={{ db01_out.tagged_instances[0].private_ip }}
          cntl ansible_host=127.0.0.1 ansible_connection=local
          
          [websrvgrp]
          web01 
          
          [appsrvgrp]
          app01
          
          [rmqsrvgrp]
          rmq01
          
          [mcsrvgrp]
          mc01
          
          [dbsrvgrp]
          db01
          
          [control]
          cntl
          
          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp
          
          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey_vpro.pem
          #ansible_python_interpreter=usr/bin/python3 
